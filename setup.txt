******************
**INITIAL SET-UP**
******************
Step 1.1: Be sure to use Node version 8.
Step 1.2: Create your root directory
Step 1.3: Initialize Node: 
    $ npm init
Step 1.4: Install and save Express, Body Parser and Nodemon and add to server.js file
    $ npm install --save express nodemon body-parser
    var express = require('express');
    var bodyParser = require('body-parser');
    var app = express();
    ...
    app.use(bodyParser.json());
Step 1.5: Create server file
    $ touch server.js
Step 1.6: Set up server with root route
    var express = require('express');
    var bodyParser = require('body-parser');
    var app = express();

    app.use(bodyParser.text());

    app.get('/', (req, res) => {
        console.log('Server is listening');
        res.send('Welcome to your server! It is good.');
    });

    app.listen(process.env.PORT || 3000), function () {
    console.log("SERVER RUNNING");
  };
Step 1.7: Start server
    $ nodemon server.js
Step 1.8: Globally install angular-cli (it it's not already)
    $ npm install -g @angular/cli
Step 1.9: Go to the root of the project and create a frontend directory
    $ ng new frontend
Step 1.10: Inside the frontend directory, start the server for the frontend
    $ ng server
Step 1.11: In the src/app directory, create directories for your services and components
    $ mkdir services components
Step 1.12: Install cors as middleware to work between frontend and backend
    $ npm install --save cors
Step 1.13: Add cors to your server.js file
    ...
    var cors = require('cors');
    var app = express();
    
    app.use(cors());

***********
**ROUTING**
***********
Step 2.1: Create a new component that will be used as a new route using angular-cli.
    $ cd src/app/components
    $ ng g c <name>

Step 2.2: Reference your new route inside your server.js file.
    const routes = [
        {path: "register", component:RegisterComponent}
    ];
    ...

Step 2.3 Add RouterModule to the app in server.js file.
    ...
    import { RouterModule } from '@angular/router';
    ...
    imports: [
        BrowserModule,
        HttpModule,
        MatButtonModule,
        MatToolbarModule,
        RouterModule.forRoot(routes)
    ],
    ...

Step 2.4: Define and add router outlet to the app.component.html file.
    <mat-toolbar>
        Mean Stack App
        <span style="flex: 1 1 auto"></span>
        <button mat-button routerLink="/register">Sign Up</button>
        <button mat-button>Log In</button>
    </mat-toolbar>
    <router-outlet></router-outlet>

*********
**MONGO**
*********
Step 3.1: Create a route in your backend server (server.js) to accept a post request, and return data as a response.
    app.post('/register', (req, res) => {
        res.send(res.statusCode);
    });

Step 3.2: Test on Postman app to confirm you can get a statusCode when making a post request to this route. Body should show up in terminal and status should be listed on Postman.
    POST> http://localhost:3000/register
    Body: checked
    Raw: checked
    JSON (application/json): checked
    Note: When sending json, you must use double-quotes with Postman!!!

Step 3.3: Log into mLab.com and set up a new database.
    Cloud Provider: AWS
    Type: Sandbox
    Region: US

Step 3.4: Add a new database user to this account and save the username and password.

Step 3.5:Download and install Mongoose (if you haven't already)
    $ npm install mongoose

Step 3.6: Add mongoose to your server.js file
    ...
    var mongoose = require('mongoose');
    ...
    mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds257640.mlab.com:57640/meanstack-test
');

Step 3.7: Change the <dbuser> and <dbpassword> to the credentials you just created in step 3.4.

Step 3.8: Add error catching code to mongo.connect
    mongoose.connect('mongodb://meanstack-test-user:meanstack-test23@ds257640.mlab.com:57640/meanstack-test', err => {
        if(!err) {
            console.log('Connected to Database!');
        } else {
            console.log('Error is: ', err);
        }
    });

Step 3.9: Create a new 'models' directory in your backend folder and inside, create a new 'user' model for your database.
    >backend
        >models
            >user.js

Step 3.10: Set up your new model.
    var mongoose = require('mongoose');

    module.exports = mongoose.model('User', {
        email: String,
        password: String
    })

Step 3.11: Require your new model in the server.js file.
    var User = require('./models/user.js');

Step 3.12: In the server.js file, update the post request to use the new model.
    ...
    app.post('/register', (req, res) => {
        let userData = req.body;
        let user = new User(userData);

        user.save((err, result) => {
            if(err) {
                console.log('There is an error saving new user');
            } else {
                res.sendStatus(200);
            }
        })
    });
    ...

Step 3.13: Using Postman, create a new post request to send data to your new mLabs database.

************
**SERVICES**
************
Step 4.1: Create a service using angular-cli
    (inside the src/app/services directory) $ ng generate service [name]
    
Step 4.2: Inject Http from angular into your service
    import { Injectable } from '@angular/core';
    import {Http} from '@angular/http';
    ...
    constructor(private http: Http) { }
    ...
    
Step 4.3: Create a get request function in your service to retrieve data from your server (for now)
    ...
    getMessage() {
        this.http.get('http://localhost:3000/posts').subscribe(res => {
        console.log(res);
        })
    }
    ...

Step 4.4: Create a route in your backend server (server.js) to accept the route you just created ('http://localhost:3000/posts'), and return data as a response
    ...
    app.get('/posts', (req, res) => {
        res.send({message:'hello world',greeting:'Bonjour monde'});
    });
    ...

Step 4.5: Declare your service as a dependency in app.module.ts so it can be used in components. Also inject whatever http request module you're using.
    ...
    import { ApiService } from './services/api.service';
    import { HttpModule } from '@angular/http';
    ...
    imports: [
        BrowserModule,
        HttpModule
    ],
    ...
    providers: [ApiService],
    ...
Step 4.6: Add the service to your component
    ...
    import { ApiService } from './services/api.service';
    ...
    constructor(private apiService: ApiService) {}
  
    ngOnInit() {
        this.apiService.getMessage();
    }
Step 4.7: If you're using two separate servers (3000, 4200) you will need to install middleware
    $ npm install --save cors

Step 4.8: Add middleware to your server.js file
    var cors = require('cors');
    var app = express();

    app.use(cors());
    ...

Step 4.9: Create a new form and bind the inputs in the .html files to variables in the .ts files.
    .ts file:
    export class RegisterComponent implements OnInit {
        registerData = {};
    ...

    .html file:
    <form class="example-form">
        <mat-form-field class="example-full-width">
            <input matInput [(ngModel)]="registerData.email" placeholder="Email" type="text" name="email">
        </mat-form-field>

        <mat-form-field class="example-full-width">
            <input matInput [(ngModel)]="registerData.password" placeholder="Password" type="password" name="password">
        </mat-form-field>
        <button mat-raised-button>Register</button>
    </form>

Step 4.10: Import FormsModule to the app.module.ts file.
    ...
    import { FormsModule } from '@angular/forms';
    ...
    imports: [
    BrowserModule,
    HttpModule,
    MatButtonModule,
    MatToolbarModule,
    MatInputModule,
    BrowserAnimationsModule,
    FormsModule,
    ...

Step 4.11: In the .ts file, create a function to log the user data after it is submitted in the form. In the .html file, bind the function to the button.
    .ts file:
    ...
    registerData = {};

    const = postNewUser => {
        console.log(this.registerData);
    }
    ...

    .html file:
    ...
        <button mat-raised-button (click)="postNewUser()">Register</button>
    </form>
    ...

Step 4.12: Create a post request method in the service.ts file
    ...
    addNewUser(userData) {
        this.http.post('http://localhost:3000/register', userData).subscribe(res => {
        console.log(res);
        })
    }
    ...

Step 4.13: In the component where you want to call the service, import the service and add it to the constructor.
    ...
    import {ApiService} from '../../services/api.service';
    ...
    registerData = {};

    constructor(private apiService: ApiService) {}
    ...

Step 4.14: In the component.ts file, update the post method to call the post method in the service.
    ...
    logRegisterData () {
        // console.log(this.registerData);
        this.apiService.addNewUser(this.registerData);
    }
    ...

Step 4.15: 
